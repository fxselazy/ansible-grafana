# To troubleshoot and get more log info enable ldap debug logging in grafana.ini
# [log]
# filters = ldap:debug

[[servers]]
# Ldap server host (specify multiple hosts space separated)
host = "{{ grafana_ldap_config.server.host }}"
# Default port is 389 or 636 if use_ssl = true
port = {{ grafana_ldap_config.server.port }}
# Set to true if ldap server supports TLS
use_ssl = {{ grafana_ldap_config.server.use_ssl | lower }}
# Set to true if connect ldap server with STARTTLS pattern (create connection in insecure, then upgrade to secure connection with TLS)
start_tls = false
# set to true if you want to skip ssl cert validation
ssl_skip_verify = {% if grafana_ldap_config.server.use_ssl == true %} true {% else %} false 
{% endif %}
# set to the path to your root CA certificate or leave unset to use system defaults
root_ca_cert = "{{ grafana_ldap_config.server.root_ca_cert |default('', true) }}" 
# Authentication against LDAP servers requiring client certificates
client_cert = "{{ grafana_ldap_config.server.client_cert |default('', true) }}"
client_key = "{{ grafana_ldap_config.server.client_key | default('', true) }}" 

# Search user bind dn
bind_dn = "{{ grafana_ldap_config.search_base.bind_dn }}"
# Search user bind password
# If the password contains # or ; you have to wrap it with triple quotes. Ex """#password;"""
bind_password = '{{ grafana_ldap_config.search_base.bind_password }}'

# User search filter, for example "(cn=%s)" or "(sAMAccountName=%s)" or "(uid=%s)"
search_filter = "{{ grafana_ldap_config.search_base.search_filter }}"

# An array of base dns to search through
search_base_dns = {{ grafana_ldap_config.search_base.search_base_dns }}

## For Posix or LDAP setups that does not support member_of attribute you can define the below settings
## Please check grafana LDAP docs for examples
# group_search_filter = "(&(objectClass=posixGroup)(memberUid=%s))"
# group_search_base_dns = ["ou=groups,dc=grafana,dc=org"]
# group_search_filter_user_attribute = "uid"

# Specify names of the ldap attributes your ldap uses
[servers.attributes]
name = "{{ grafana_ldap_config.search_base.attributes.name }}"
surname = "{{ grafana_ldap_config.search_base.attributes.surname }}"
username = "{{ grafana_ldap_config.search_base.attributes.username }}"
member_of = "{{ grafana_ldap_config.search_base.attributes.member_of }}"
email = "{{ grafana_ldap_config.search_base.attributes.email }}"

# Map ldap groups to grafana org roles

# {{ ansible_managed }}
{% for i in range(grafana_ldap_config.group_maps|length) %}
[[servers.group_mappings]]
{% for key, value in grafana_ldap_config.group_maps[i].items() %}
{% if value is not mapping %}
{% if value is boolean or value is number %}
{{ key }} = {{ value | lower }}
{% else %}
{{ key }} = "{{ value }}"
{% endif %}
{% endif %}
{% endfor %}
{% endfor %}